#!/bin/bash

# Pre-commit hook to prevent internal development terms from leaking into commits
# This hook checks both staged files and the commit message for forbidden terms

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Forbidden terms that should never appear in public commits
FORBIDDEN_TERMS=(
    "[Pp]hase [0-9]"
    "[Pp]hases"
    "PIVOT_PLAN"
    "CLAUDE\.md"
    "roadmap"
    "subtask"
    "task list"
    "internal planning"
    "development dialogue"
)

# Function to check for forbidden terms
check_forbidden_terms() {
    local file="$1"
    local found=0
    
    for term in "${FORBIDDEN_TERMS[@]}"; do
        if grep -E "$term" "$file" > /dev/null 2>&1; then
            echo -e "${RED}ERROR: Found forbidden term '$term' in $file${NC}"
            grep -n -E "$term" "$file" | head -5
            found=1
        fi
    done
    
    return $found
}

echo -e "${YELLOW}Running pre-commit checks...${NC}"

# Check staged files for forbidden terms
errors_found=0

# Get list of staged files (excluding deleted files)
staged_files=$(git diff --cached --name-only --diff-filter=d)

if [ -n "$staged_files" ]; then
    for file in $staged_files; do
        # Skip binary files and certain file types
        if [[ "$file" =~ \.(jpg|jpeg|png|gif|pdf|ico|svg|woff|woff2|ttf|eot)$ ]]; then
            continue
        fi
        
        # Skip vendor and node_modules directories
        if [[ "$file" =~ ^(vendor|node_modules)/ ]]; then
            continue
        fi
        
        # Skip development safeguard files
        if [[ "$file" == ".gitignore" ]] || [[ "$file" == ".gitmessage" ]] || [[ "$file" =~ ^\.githooks/ ]] || [[ "$file" =~ ^scripts/pre-push-check\.sh$ ]]; then
            continue
        fi
        
        # Check the staged content (not working directory)
        if git show ":$file" | grep -E "$(IFS='|'; echo "${FORBIDDEN_TERMS[*]}")" > /dev/null 2>&1; then
            echo -e "${RED}ERROR: Found forbidden terms in staged file: $file${NC}"
            git show ":$file" | grep -n -E "$(IFS='|'; echo "${FORBIDDEN_TERMS[*]}")" | head -5
            errors_found=1
        fi
    done
fi

# Check commit message file if it exists
if [ -f "$1" ]; then
    echo -e "\n${YELLOW}Checking commit message...${NC}"
    if check_forbidden_terms "$1"; then
        errors_found=1
    fi
fi

# Additional checks for specific problematic patterns
echo -e "\n${YELLOW}Checking for development artifacts...${NC}"

# Check for console.log or debug prints in staged files
if [ -n "$staged_files" ]; then
    for file in $staged_files; do
        if [[ "$file" =~ \.(go|js|ts|jsx|tsx)$ ]]; then
            if grep -E "(console\.log|fmt\.Printf|println!|debugger)" "$file" > /dev/null 2>&1; then
                echo -e "${RED}ERROR: Found debug statements in $file${NC}"
                grep -n -E "(console\.log|fmt\.Printf|println!|debugger)" "$file" | head -5
                errors_found=1
            fi
        fi
    done
fi

# Check for TODO comments referencing internal planning
if [ -n "$staged_files" ]; then
    for file in $staged_files; do
        # Skip development safeguard files
        if [[ "$file" == ".gitignore" ]] || [[ "$file" == ".gitmessage" ]] || [[ "$file" =~ ^\.githooks/ ]] || [[ "$file" =~ ^scripts/pre-push-check\.sh$ ]]; then
            continue
        fi
        
        if git show ":$file" | grep -E "TODO.*([Pp]hase|roadmap|CLAUDE|PIVOT)" > /dev/null 2>&1; then
            echo -e "${RED}ERROR: Found TODO with internal references in $file${NC}"
            git show ":$file" | grep -n -E "TODO.*([Pp]hase|roadmap|CLAUDE|PIVOT)" | head -5
            errors_found=1
        fi
    done
fi

if [ $errors_found -eq 1 ]; then
    echo -e "\n${RED}Pre-commit check failed!${NC}"
    echo -e "${YELLOW}Please remove all internal development references before committing.${NC}"
    echo -e "${YELLOW}This is a public repository visible to clients and competitors.${NC}"
    exit 1
fi

echo -e "${GREEN}Pre-commit checks passed!${NC}"
exit 0