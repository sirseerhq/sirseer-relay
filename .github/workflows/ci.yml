name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  license-check:
    name: License Headers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Check license headers
        run: |
          go install github.com/google/addlicense@latest
          # Check if all .go files have the correct license header
          if addlicense -check -f .license-header -c "SirSeer, LLC" -y 2025 $(find . -name '*.go' -not -path './vendor/*'); then
            echo "✅ All files have proper license headers"
          else
            echo "❌ Some files are missing license headers:"
            addlicense -check -f .license-header -c "SirSeer, LLC" -y 2025 $(find . -name '*.go' -not -path './vendor/*')
            exit 1
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [license-check, lint]
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Run tests
        run: go test -v -race -cover ./...
      
      - name: Run tests with coverage
        if: matrix.go-version == env.GO_VERSION
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
      
      - name: Check coverage threshold
        if: matrix.go-version == env.GO_VERSION
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          # For now, let's check what the coverage is
          echo "Current coverage is $COVERAGE%"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          OUTPUT="sirseer-relay-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -v -o $OUTPUT ./cmd/relay
          echo "Built $OUTPUT"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sirseer-relay-${{ matrix.os }}-${{ matrix.arch }}
          path: sirseer-relay-*

  memory-test:
    name: Memory Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        run: go build -o sirseer-relay ./cmd/relay
      
      - name: Test memory usage
        run: |
          # This would test with a real token in actual CI
          # For now, we'll just verify the binary runs
          ./sirseer-relay --version
          
          # In real CI, we'd do:
          # /usr/bin/time -v ./sirseer-relay fetch golang/go --output test.ndjson
          # And verify memory usage < 100MB