name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  license-check:
    name: License Headers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Check license headers
        run: |
          go install github.com/google/addlicense@latest
          
          # Create the license header template for CI
          cat <<'EOF' > .license-header-ci
Copyright {{.Year}} {{.Holder}}

Licensed under the Business Source License 1.1 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://mariadb.com/bsl11

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
EOF
          
          # Check if all .go files have the correct license header
          if addlicense -check -f .license-header-ci -c "SirSeer, LLC" -y 2025 $(find . -name '*.go' -not -path './vendor/*'); then
            echo "✅ All files have proper license headers"
          else
            echo "❌ Some files are missing license headers:"
            addlicense -check -f .license-header-ci -c "SirSeer, LLC" -y 2025 $(find . -name '*.go' -not -path './vendor/*')
            exit 1
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [license-check, lint]
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Run tests
        run: go test -v -race -cover ./...
      
      - name: Run tests with coverage
        if: matrix.go-version == env.GO_VERSION
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
      
      - name: Check coverage threshold
        if: matrix.go-version == env.GO_VERSION
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          THRESHOLD=75
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Coverage $COVERAGE% is below the $THRESHOLD% threshold"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets the $THRESHOLD% threshold"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          OUTPUT="sirseer-relay-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -v -o $OUTPUT ./cmd/relay
          echo "Built $OUTPUT"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sirseer-relay-${{ matrix.os }}-${{ matrix.arch }}
          path: sirseer-relay-*

  version-injection:
    name: Version Injection
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build with version injection
        run: |
          VERSION="v1.2.3-test"
          go build -ldflags "-X github.com/sirseerhq/sirseer-relay/pkg/version.Version=$VERSION" \
            -o sirseer-relay ./cmd/relay
      
      - name: Verify version injection
        run: |
          OUTPUT=$(./sirseer-relay --version 2>&1)
          echo "Version output: $OUTPUT"
          
          # Check that injected version appears in output
          if ! echo "$OUTPUT" | grep -q "v1.2.3-test"; then
            echo "❌ Version injection failed: expected v1.2.3-test in output"
            exit 1
          fi
          
          # Check that BSL license info appears
          if ! echo "$OUTPUT" | grep -q "Business Source License"; then
            echo "❌ BSL license info missing from version output"
            exit 1
          fi
          
          if ! echo "$OUTPUT" | grep -q "2029"; then
            echo "❌ BSL conversion date missing from version output"
            exit 1
          fi
          
          echo "✅ Version injection working correctly"

  memory-test:
    name: Memory Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        run: go build -o sirseer-relay ./cmd/relay
      
      - name: Test memory usage
        run: |
          # This would test with a real token in actual CI
          # For now, we'll just verify the binary runs
          ./sirseer-relay --version
          
          # In real CI, we'd do:
          # /usr/bin/time -v ./sirseer-relay fetch golang/go --output test.ndjson
          # And verify memory usage < 100MB